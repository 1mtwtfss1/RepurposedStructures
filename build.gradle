buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

repositories {
    maven {
        url "https://maven.tterrag.com/"
    }
    flatDir {
        dirs 'deps'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${mc_version}-${mod_version}"
group = "com.telepathicgrunt.repurposed_structures"
archivesBaseName = "repurposed_structures"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {

    mappings channel: 'snapshot', version: "${mapping}-mixed-${yarnmcp_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
   
    runs {
        client {
            workingDirectory project.file('run')
            arg "-mixin.config="+archivesBaseName+".mixins.json"
            mods { repurposed_structures { source sourceSets.main } }
        }

        server {
            workingDirectory project.file('run')
            arg "-mixin.config="+archivesBaseName+".mixins.json"
            mods { repurposed_structures { source sourceSets.main } }
        }
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    //implementation fg.deobf("ignored:TerraForged-1.16.4:0.2.5")
}


jar {
    manifest {
        attributes([
            "Specification-Title": "repurposed_structures",
            "Specification-Vendor": "telepathicgrunt",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"telepathicgrunt",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "repurposed_structures.mixins.json"
        ])
    }
}


import groovy.json.JsonSlurper
import groovy.json.JsonOutput
processResources {
    // This will ensure that this task is redone when the versions change.
    inputs.property 'version', project.version

    // Replace stuff in mods.toml, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        // Replace version
        expand 'version':project.version
    }

    // Copy everything else except the mods.toml
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }

    doLast {
        def jsonMinifyStart = System.currentTimeMillis()
        def jsonMinified = 0
        def jsonBytesSaved = 0
        fileTree(dir: outputs.files.asPath, include: '**/*.json').each {
            File file = it
            jsonMinified++
            def oldLength = file.length()
            try{
                file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
            }
            catch(Exception e){
                System.out.println("Parsing JSON error in " + file.path)
                throw e
            }
            jsonBytesSaved += oldLength - file.length()
        }
        println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
    }

}

apply plugin: 'org.spongepowered.mixin'
mixin { add sourceSets.main, "repurposed_structures.refmap.json" }
